start
scan one character at a time of infix expressio  from left to right.
opstack=the empty stack
Repeat till there is data in infix expression
if scanned character is "(" then push it to opstack.
if scanned character is operand then push it to poststack.
if scanned character is operator then

    while(precedence(opstack[otos])>precedence(scanned character)) then
    pop and push it into poststack
    otherwise
    push scanned character into opstack.
    if scanned character is ")" then
    pop and push into poststack untill "(" is not found and ignore the both symbols.
    pop and push into poststack untill the opstack is empty.
    stop.


//
start
create a new node using malloc function
struct *newnode =(node*) malloc(sizeof(newnode));
Read item to be inserted lets say data.
newnode->info=data;
set next of newnode to null
newnode->next=null;
if(first==null)then
set first=last=newnode and exit
else
set last->next=newnode;
set last = newnode;
end


algorithm for circular queue

for enqueue
let front=-1,rear = -1,arr[size];

void enqueue()
{
    if(rear=(rear+1)%size==front)
    {
        print "the queue is in overflow condition";
    }
    else
    {
        if(front==-1)
        {
            front=0;
        }
        rear=(rear+1)%size;
        arr[rear]=value;
        print "The enqueued element is arr[rear]";
    }
}

void dequeue()
{
    if(front==-1)
    {
        print "The queue is empty";
            }
            else
            {
                print "The dequeued element is arr[front];
                if(front==rear)
                {
                    front=rear=-1;
                }
                else
                {
                    front = (front+1)%size;
                }
            }
}
void display()
{
    if(front==-1)
    {
        print "The queue is empty";
    }
    else
    {
        for(i=front;i<=rear;i=(i+1)%size)
        {
            print "arr[i]";
        }
    }
}